plugins {
    id 'java'
    id 'idea'
    id 'groovy'
    id 'signing'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
}

group = 'com.github.joutvhu'
version = '1.1.13-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'org.springframework:spring-aspects'
    compile 'org.springframework:spring-context'
    compile 'org.springframework:spring-context-support'

    compile 'org.springframework.data:spring-data-jpa'
    compile 'org.springframework.data:spring-data-commons'
    compile 'jakarta.transaction:jakarta.transaction-api'
    compile 'jakarta.persistence:jakarta.persistence-api'
    compile('org.hibernate:hibernate-core') {
        exclude group: 'javax.activation', module: 'javax.activation-api'
        exclude group: 'javax.persistence', module: 'javax.persistence-api'
        exclude group: 'javax.xml.bind', module: 'jaxb-api'
        exclude group: 'org.jboss.spec.javax.transaction', module: 'jboss-transaction-api_1.2_spec'
    }

    annotationProcessor "org.projectlombok:lombok"
    compile 'org.projectlombok:lombok'

    compile 'org.freemarker:freemarker:2.3.30'
    compile 'org.apache.commons:commons-lang3:3.11'
    compile 'org.apache.logging.log4j:log4j-api:2.13.3'
    compile 'com.google.code.findbugs:jsr305:3.0.2'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'junit:junit'
    testCompile 'com.h2database:h2'
    testCompile 'org.junit.platform:junit-platform-commons'
}

jar {
    manifest {
        attributes 'Built-By': 'joutvhu (Giao Ho)'
    }
    into("META-INF/maven/${project.group}/${project.name}") {
        from {
            generatePomFileForMavenPublication
        }
        rename {
            it.replace('pom-default.xml', 'pom.xml')
        }
    }
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    with jar
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives fatJar, sourcesJar, javadocJar
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            groupId = group
            artifactId = project.name
            artifacts = [fatJar, sourcesJar, javadocJar]
            version = version

            pom {
                name = project.name
                description = 'Easier to implement dynamic queries with JpaRepository'
                url = 'https://github.com/joutvhu/spring-dynamic-jpa'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/joutvhu/spring-dynamic-jpa/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'joutvhu'
                        name = 'Giao Ho'
                        email = 'joutvhu@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:joutvhu/spring-dynamic-jpa.git'
                    developerConnection = 'scm:git:git@github.com:joutvhu/spring-dynamic-jpa.git'
                    url = 'https://github.com/joutvhu/spring-dynamic-jpa'
                }
                issueManagement {
                    system = 'Github Issue'
                    url = 'https://github.com/joutvhu/spring-dynamic-jpa/issues'
                }
                organization {
                    name = 'Giao Ho'
                    url = 'https://github.com/joutvhu'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'sonatype'
            if (version.endsWith('-SNAPSHOT') || version.endsWith('.SNAPSHOT')) {
                url = 'https://oss.sonatype.org/content/repositories/snapshots'
            } else {
                url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            }
            credentials {
                username = project.ossrhUsername
                password = project.ossrhPassword
            }
        }
        maven {
            name = 'github'
            url = "https://maven.pkg.github.com/joutvhu/spring-dynamic-jpa"
            credentials {
                username = project.githubUsername
                password = project.githubPassword
            }
        }
    }
}

signing {
    sign publishing.publications.maven
}
